Course: COMP SCI 7007 – Specialised Programming, Semester 2/2025
Name: Sk Md Shariful Islam Arafat
ID: a1983627
Practice problem/Exam and number: CatGame, CellRemoval, RockStar
Week: 9

*******************
* Description *
*******************
1. List the problems you attempted, and Java API Classes and methods you used to
solve each problem.
[Eg. SlowKeyBoard: ArrayList (size, add, get), Arrays.sort]

Problem1: CatGame
- Java Classes: java.util.Arrays (sort).
- Main Idea: Sort coordinates and consider a split index k (0…n). Move indices [0..k-1] to +X and [k..n-1] to −X. The span for a split is max(finals) − min(finals) computed from at most four candidates: {a0+X, a(k−1)+X, a(k)−X, a(n−1)−X} (when valid). Take the minimum over all k. Runs in O(n) after sort when computed carefully.

Problem2: CellRemoval
- Java Classes: java.util.ArrayList (add, get), java.util.List, java.util.Arrays (fill).
- Main Idea: Modelled the cell structure as a binary tree built from the parent array; used DFS to mark the deleted cell and its descendants and counted remaining leaf nodes.

Problem3: RockStar
- Java Classes: none beyond primitives and Math.min.
- Main Idea: Handled transitions between fast/slow zones based on restrictions. If no fast-starting songs, start with slow zone; else calculate sequence length using greedy transitions and boundary conditions.

*******************
* Challenges *
*******************
2. What challenges have you faced to solve the given problems?

Problem1:
- Multiple incorrect formulas (interval overlap and (max−min)−2X) failed on mixed-sign sets.
- Needed a construction that simultaneously accounts for opposite-direction moves.

Problem2:
- Ensuring root deletion returns 0 cells.
- Properly identifying leaf nodes that lose all children after deletion.
- Avoided StackOverflow by using recursion limits and visited tracking.

Problem3:
- Logical errors in handling transition cases (fs = 0 or sf = 0).
- Derived correct greedy formula through case analysis rather than simulation.

************************
* Solution Approach *
************************
3. Discuss how you approach the problem and how you solve the problem.

Problem1:
- Sort all cat coordinates to make positional reasoning easier.
- Assume there’s a single “split point” — cats on the left side jump right (+X), and cats on the right side jump left (−X).
- For each possible split index k, compute the resulting min and max positions from both sides and find their difference (spread).
- The smallest spread over all splits is the answer, giving the minimal possible distance between the farthest cats after all have moved.

Problem2:
- Constructed adjacency list of children from parent.
- DFS to mark deleted subtree.
- Counted remaining leaves that have no alive children.

Problem3:
- If no fast-start songs: use all SS + optionally 1 SF.
- Else: add FF block, optional FS for transition, then SS block + min(sf, ss).
- Analysed restrictions as state transitions to formulate closed expression.

4. What did you learn from the problem?
- Prefer constructive extremal searches (CatGame split-index) over brittle algebraic bounds.
- Applied tree DFS deletion pattern and leaf recount techniques.
- Strengthened reasoning on greedy state transitions and conditional formula derivation.

5. Which area you focused on improving (eg. speed, fluency, algorithmic design, coding)?  
- Formalizing optimal substructure before coding (identify valid extremal configurations).
- Edge-case harnesses for counterexamples (mixed signs, zero X, single element).
- Refining memoization table structures and edge case validation.

6. What are your goals for the next practice problems? 
- practice digit-DP with additional properties (e.g. non-decreasing digits, divisibility constraints). 
- optimize DFS depth management.

7. Have you used any AI tool such as ChatGPT? How have you used it and explain this tool is helping you to be a better problem solver?  
- Yes, ChatGPT was used to verify algorithmic correctness and derive simplified formulas (e.g. max(0, Lmax – Rmin) for CatGame and the closed-form transition logic for RockStar).
- This tool accelerated debugging and improved my ability to structure clean, efficient Java solutions for constraint-heavy problems.
