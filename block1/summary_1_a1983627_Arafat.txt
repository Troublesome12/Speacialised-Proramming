Course: COMP SCI 7007 â€“ Specialised Programming, Semester 2/2025
Name: Sk Md Shariful Islam Arafat
ID: a1983627
Practice problem/Exam and number: AlternateColors, ChangingString
Week: 1

*******************
* Description *
*******************
1. List the problems you attempted, and Java API Classes and methods you used to
solve each problem.
[Eg. SlowKeyBoard: ArrayList (size, add, get), Arrays.sort]

Problem1: AlternateColors
- Java Classes: none (used primitive long and arrays).
- Main Idea: mathematical observation of cycles; modular arithmetic.

Problem2: ChangingString
- Java Classes: java.lang.String (charAt, length), java.util.Arrays (sort), java.util.Collections (reverseOrder).
- Main Idea: compute per-character absolute differences, sort differences descending, choose K positions to minimize distance, handle forced changes.

*******************
* Challenges *
*******************
Problem1:
- Initially tried using arrays or ArrayList to store destruction sequence which was impossible due to very large input constraints.
- Had to find an approach that calculates color directly without iteration.

Problem2:
- Ensuring indexes don't go out of bounds.
- Correctly handling all the cases.

************************
* Solution Approach *
************************
3. Approach:
Problem1:
- Observed destruction happens in cycles of red, green, blue balls repeatedly.
- Calculated how many full cycles where all three colors exist: `fullCycles = min(r, g, b)`.
- For `k` within full cycles, used modular arithmetic to directly find color.
- For leftover balls, identified which colors remain, counted cycles again, and mapped `k` to color via simple indexing.

Problem2:
- Computed absolute differences for each character between two strings.
- Stored differences in an Integer array and sorted descending.
- Used up to K changes to reduce differences by zeroing largest differences first.
- If K still remained, applied changes on zero-difference characters by increasing total distance by 1 per forced change.
- Summed the remaining differences as the minimized total distance.

4. What did you learn from the problem?
- Problem1: Learned how to apply mathematical observations to reduce memory and/or time complexity.
- Problem2: Learned greedy algorithm and how to handle edge cases.

5. Which area you focused on improving (eg. speed, fluency, algorithmic design, coding)?  
- Improved algorithmic design efficiency and speed in Problem1.
- Improved deeper thinking ability and coding in Problem2.

6. What are your goals for the next practice problems? 
- Further reduce algorithmic complexity where possible.  
- Will start a solution with Brute Force and leter will try to improve with appropriate algorithm.

7. Have you used any AI tool such as ChatGPT? How have you used it and explain this tool is helping you to be a better problem solver?  
- For problem1 I initially solved by storing data into an Array which caused memory overflow, so I used Chat GPT to learn about a better approach. This helped ensure correctness, find inefficiencies, and improve solution clarity before final implementation.
- For problme2 I didn't use any language model. 
